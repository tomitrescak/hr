generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String      @id @default(uuid())
  email        String      @unique
  passwordHash String
  name         String
  role         Role        @default(USER)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  changeLogs   ChangeLog[]
  person       Person?

  @@map("users")
}

model Person {
  id                 String              @id @default(uuid())
  userId             String              @unique
  name               String
  email              String              @unique
  alternativeEmail   String?
  role               Role
  entryDate          DateTime            @default(now())
  isActive           Boolean             @default(true)
  deactivatedAt      DateTime?
  cv                 String?
  capacity           Int                 @default(100)
  photoId            String?
  courseEnrollments  CourseEnrollment[]
  photo              Image?              @relation(fields: [photoId], references: [id])
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  competencies       PersonCompetency[]
  oneOnOneReviews    PersonReview[]      @relation("PersonOneOnOneReviews")
  projectAllocations ProjectAllocation[]
  taskAssignments    Task[]

  @@map("people")
}

model Competency {
  id                 String               @id @default(uuid())
  type               CompetencyType
  name               String
  description        String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  embeddings         CompetencyEmbedding?
  courseCompetencies CourseCompetency[]
  personCompetencies PersonCompetency[]

  @@map("competencies")
}

model CompetencyEmbedding {
  id           String                 @id @default(uuid())
  competencyId String                 @unique
  embedding    Float[]
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  embeddings   Unsupported("vector")?
  competency   Competency             @relation(fields: [competencyId], references: [id], onDelete: Cascade)

  @@index([embeddings])
  @@index([embeddings], map: "competency_embeddings_embeddings_idx1")
  @@map("competency_embeddings")
}

model PersonCompetency {
  id            String       @id @default(uuid())
  personId      String
  competencyId  String
  proficiency   Proficiency?
  lastUpdatedAt DateTime     @default(now())
  competency    Competency   @relation(fields: [competencyId], references: [id], onDelete: Cascade)
  person        Person       @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@unique([personId, competencyId])
  @@map("person_competencies")
}

model Course {
  id                    String                 @id @default(uuid())
  name                  String
  description           String?
  content               String?
  duration              Int?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  type                  CourseType             @default(COURSE)
  url                   String?
  competencies          CourseCompetency[]
  enrollments           CourseEnrollment[]
  courseSpecialisations SpecialisationCourse[] @relation("CourseToSpecialisationCourse")
  specialisationCourses SpecialisationCourse[] @relation("SpecialisationToSpecialisationCourse")

  @@map("courses")
}

model CourseCompetency {
  id           String       @id @default(uuid())
  courseId     String
  competencyId String
  proficiency  Proficiency?
  competency   Competency   @relation(fields: [competencyId], references: [id], onDelete: Cascade)
  course       Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([courseId, competencyId])
  @@map("course_competencies")
}

model SpecialisationCourse {
  id               String   @id @default(uuid())
  specialisationId String
  courseId         String
  order            Int?
  createdAt        DateTime @default(now())
  course           Course   @relation("CourseToSpecialisationCourse", fields: [courseId], references: [id], onDelete: Cascade)
  specialisation   Course   @relation("SpecialisationToSpecialisationCourse", fields: [specialisationId], references: [id], onDelete: Cascade)

  @@unique([specialisationId, courseId])
  @@map("specialisation_courses")
}

model CourseEnrollment {
  id          String           @id @default(uuid())
  courseId    String
  personId    String
  status      EnrollmentStatus @default(WISHLIST)
  progress    Int?             @default(0)
  completed   Boolean          @default(false)
  enrolledAt  DateTime         @default(now())
  startedAt   DateTime?
  completedAt DateTime?
  course      Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  person      Person           @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@unique([courseId, personId])
  @@map("course_enrollments")
}

model Project {
  id          String              @id @default(uuid())
  name        String
  description String
  status      ProjectStatus       @default(ACTIVE)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  okrs        OKR[]
  allocations ProjectAllocation[]
  tasks       Task[]

  @@map("projects")
}

model OKR {
  id          String      @id @default(uuid())
  projectId   String
  title       String
  description String
  metric      String?
  target      String?
  dueDate     DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  keyResults  KeyResult[]
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks       Task[]

  @@map("okrs")
}

model KeyResult {
  id          String    @id @default(uuid())
  okrId       String
  title       String
  description String?
  progress    Int       @default(0)
  target      String?
  metric      String?
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  okr         OKR       @relation(fields: [okrId], references: [id], onDelete: Cascade)

  @@map("key_results")
}

model ProjectAllocation {
  id                 String   @id @default(uuid())
  projectId          String
  personId           String?
  title              String
  description        String
  capacityAllocation Int      @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  person             Person?  @relation(fields: [personId], references: [id])
  project            Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_allocations")
}

model Task {
  id          String    @id @default(uuid())
  projectId   String
  okrId       String?
  title       String
  description String?
  assigneeId  String?
  priority    Priority? @default(MEDIUM)
  state       LeanState @default(BACKLOG)
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  assignee    Person?   @relation(fields: [assigneeId], references: [id])
  okr         OKR?      @relation(fields: [okrId], references: [id])
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model PersonReview {
  id            String   @id @default(uuid())
  personId      String
  recordingText String
  notes         String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  person        Person   @relation("PersonOneOnOneReviews", fields: [personId], references: [id], onDelete: Cascade)

  @@map("person_reviews")
}

model ChangeLog {
  id          String         @id @default(uuid())
  entity      EntityKind_old
  entityId    String
  field       String
  fromValue   Json?
  toValue     Json?
  state       ChangeState
  changedAt   DateTime       @default(now())
  changedById String
  changedBy   User           @relation(fields: [changedById], references: [id])

  @@index([entity, entityId])
  @@index([changedAt])
  @@map("change_logs")
}

model Image {
  id        String   @id @default(uuid())
  data      String
  mimeType  String
  size      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  persons   Person[]

  @@map("images")
}

enum Role {
  USER
  PROJECT_MANAGER
}

enum CompetencyType {
  KNOWLEDGE
  SKILL
  TECH_TOOL
  ABILITY
  VALUE
  BEHAVIOUR
  ENABLER
}

enum Proficiency {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum LeanState {
  BACKLOG
  READY
  IN_PROGRESS
  BLOCKED
  REVIEW
  DONE
}

enum Contribution {
  LOW
  MEDIUM
  HIGH
}

enum ChangeState {
  CREATED
  MODIFIED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum CourseType {
  COURSE
  SPECIALISATION
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ON_HOLD
  PLANNING
}

enum EnrollmentStatus {
  WISHLIST
  IN_PROGRESS
  COMPLETED
}

enum EntityKind_old {
  PERSON
  COURSE
  PROJECT
  TASK
  PERSON_COMPETENCY
  COURSE_COMPETENCY
  PROJECT_ALLOCATION
  OKR
  KEY_RESULT
}
